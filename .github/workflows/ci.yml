name: CI

on:
  push:
    branches: [main, release/*]
  pull_request:
    branches: [main]

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.changed-files.outputs.all_modified_files	}}
    steps:
      - uses: actions/checkout@v2
      - name: Detect changed files
        uses: tj-actions/changed-files@v35
        id: changed-files-dir-names-max-depth
        with:
          dir_names: "true"
          dir_names_max_depth: 1

  ci-web:
    name: Check and build web change
    needs: changed-files
    if: contains(needs.changed-files.outputs.files, 'web/')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: yarn install
      - name: Check
        run: yarn run check
      - name: Test
        run: yarn run coverage
      - name: Check translations
        run: yarn i18n --fail-on-update
      - name: Send coverage report
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: web
      - name: Build
        run: yarn build
      - name: Pack
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'
        run: mv dist reearth-web && tar -zcvf reearth-web.tar.gz reearth-web
      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'
        with:
          name: build
          path: web/reearth-web.tar.gz
          if-no-files-found: error

  ci-server:
    name: Check server change
    needs: changed-files
    if: contains(needs.changed-files.outputs.files, 'server/')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    services:
      mongo:
        image: mongo:5-focal
        ports:
          - 27017:27017
    steps:
      - name: set up
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: checkout
        uses: actions/checkout@v3
      - name: cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.51
          args: --timeout=10m
          working-directory: server
      - name: test
        run: go test ./... -v -race -coverprofile=coverage.txt -covermode=atomic -timeout 10m
        env:
          REEARTH_DB: mongodb://localhost
        working-directory: server
      - name: Send coverage report
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: server

  slack-notification:
    name: Slack Notification
    needs: [ci-web, ci-server]
    if: success() || failure()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification
        uses: Gamesight/slack-workflow-status@master
        if: always()
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  info:
    name: Collect information
    needs: [ci-web, ci-server]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && github.event.repository.full_name == 'reearth/reearth' && (github.event.workflow_run.head_branch == 'release' || !startsWith(github.event.head_commit.message, 'v')) }}
    outputs:
      sha_short: ${{ steps.info.outputs.sha_short }}
      tag: ${{ steps.info.outputs.tag }}
      tag_short: ${{ steps.info.outputs.tag_short }}
      name: ${{ steps.info.outputs.name }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Fetch tags
        run: git fetch --prune --unshallow --tags
      - name: Get info
        id: info
        env:
          BRANCH: ${{ github.event.workflow_run.head_branch }}
        # The tag name should be retrieved lazily, as tagging may be delayed.
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          if [[ "$BRANCH" = "release" ]]; then
            TAG=$(git tag --points-at HEAD)
            if [[ ! -z "$TAG" ]]; then
              echo "::set-output name=tag::$TAG"
              echo "::set-output name=tag_short::${TAG#v}"
            else
              echo "::set-output name=name::rc"
            fi
          else
            echo "::set-output name=name::nightly"
          fi
      - name: Show info
        env:
          SHA_SHORT: ${{ steps.info.outputs.sha_short }}
          TAG: ${{ steps.info.outputs.tag }}
          TAG_SHORT: ${{ steps.info.outputs.tag_short }}
          NAME: ${{ steps.info.outputs.name }}
        run: echo "sha_short=$SHA_SHORT, tag=$TAG, tag_short=$TAG_SHORT, name=$NAME"

  build-server:
    name: Build and release server
    runs-on: ubuntu-latest
    needs: [ci-web, ci-server, info]
    if: ${{ github.event_name == 'push' && always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && (needs.info.outputs.name || needs.info.outputs.tag) }}
    env:
      ARTIFACTS: server/dist/reearth_*.*
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --rm-dist ${{ env.SNAPSHOT }}
          workdir: server
        env:
          SNAPSHOT: ${{ !needs.info.outputs.tag && '--snapshot' || '' }}
          GORELEASER_CURRENT_TAG: ${{ needs.info.outputs.tag || '0.0.0' }}
      - name: Rename artifacts
        if: needs.info.outputs.name
        run: for f in $ARTIFACTS; do mv $f $(echo $f | sed -E 's/_0\.0\.0-SNAPSHOT-[^_]*/_${{ needs.info.outputs.name }}/'); done
      - name: List artifacts
        run: ls -l server/dist
      - name: Release nightly/rc
        if: needs.info.outputs.name
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACTS }}
          commit: ${{ github.sha }}
          name: ${{ needs.info.outputs.name }}
          tag: ${{ needs.info.outputs.name }}
          body: ${{ needs.info.outputs.sha_short }}
          prerelease: true

  web-release:
    name: Release web
    runs-on: ubuntu-latest
    needs: [ci-web, ci-server, info]
    if: ${{ github.event_name == 'push' && always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && (needs.info.outputs.name || needs.info.outputs.tag) }}
    env:
      ARTIFACT: web/reearth-web_${{ needs.info.outputs.tag }}.tar.gz
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build
      - name: Rename artifact
        run: mv web/reearth-web.tar.gz $ARTIFACT
      - name: Download latest changelog
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: release.yml
          name: web/changelog-${{ needs.info.outputs.tag }}
        if: needs.info.outputs.tag
      - name: Release nightly
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACT }}
          artifactContentType: application/gzip
          commit: ${{ github.sha }}
          name: nightly-${{ github.run_number }}
          tag: nightly-${{ github.run_number }}
          bodyFile: web/CHANGELOG_latest.md
          prerelease: true
      - name: Release rc
        if: github.ref == 'refs/heads/release'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACT }}
          artifactContentType: application/gzip
          commit: ${{ github.sha }}
          name: rc-${{ needs.info.outputs.tag }}
          tag: rc-${{ needs.info.outputs.tag }}
          bodyFile: web/CHANGELOG_latest.md
          prerelease: false

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [info, web-release, ci-web, build-server]
    if: ${{ github.event_name == 'push' && !contains(needs.*.result, 'failure') && (needs.info.outputs.name || needs.info.outputs.tag) }}
    env:
      IMAGE_NAME: reearth/reearth
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get options
        id: options
        env:
          TAG: ${{ needs.info.outputs.tag_short }}
          NAME: ${{ needs.info.outputs.name }}
          SHA: ${{ needs.info.outputs.sha_short }}
        run: |
          if [[ -n $TAG ]]; then
            PLATFORMS=linux/amd64,linux/arm64
            VERSION=$TAG
            TAGS=$IMAGE_NAME:$TAG
            if [[ ! $TAG =~ '-' ]]; then
              TAGS+=,${IMAGE_NAME}:${TAG%.*}
              TAGS+=,${IMAGE_NAME}:${TAG%%.*}
              TAGS+=,${IMAGE_NAME}:latest
            fi
          else
            PLATFORMS=linux/amd64
            VERSION=$SHA
            TAGS=$IMAGE_NAME:$NAME
          fi
          echo "::set-output name=platforms::$PLATFORMS"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=tags::$TAGS"
      - name: Fetch reearth-web release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: reearth/reearth
          version: tags/${{ needs.info.outputs.name || needs.info.outputs.tag }}
          file: web/reearth-web_${{ needs.info.outputs.name || needs.info.outputs.tag }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          target: server/reearth-web.tar.gz
      - name: Extract reearth/web
        run: tar -xvf server/reearth-web.tar.gz; mv server/reearth-web server/web; ls server
      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          context: server
          platforms: ${{ steps.options.outputs.platforms }}
          push: true
          build-args: VERSION=${{ steps.options.outputs.version }}
          tags: ${{ steps.options.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-web:
    name: Deploy web to test env
    needs: [web-release]
    if: ${{ github.event_name == 'push' && contains(needs.web-release.result, 'success') && github.event.repository.full_name == 'reearth/reearth' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: get latest web artifact
        uses: dawidd6/action-download-artifact@v2.24.0
        with:
          github_token: ${{ secrets.GPT }}
          workflow: ci_web.yml
          workflow_conclusion: success
          branch: main
          name: reearth-web
          check_artifacts: true
          search_artifacts: true
      - name: Extract
        run: tar -xvf web/reearth-web_nightly.tar.gz
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
      - name: Deploy
        run: gsutil -m -h "Cache-Control:no-store" rsync -x "^reearth_config\\.json$" -dr reearth-web/ $GCS_DEST

  deploy-server:
    name: Deploy server to test env
    needs: [docker]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && contains(needs.docker.result, 'success') && github.event.repository.full_name == 'reearth/reearth' && github.event.workflow_run.head_branch == 'main' }}
    steps:
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
      - name: Configure docker
        run: gcloud auth configure-docker --quiet
      - name: docker push
        run: |
          docker pull $IMAGE
          docker tag $IMAGE $IMAGE_GCP
          docker push $IMAGE_GCP
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy reearth-backend \
            --image $IMAGE_GCP \
            --region $GCP_REGION \
            --platform managed \
            --quiet
