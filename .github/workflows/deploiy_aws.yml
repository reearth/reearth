name: deploy-aws
on:
  workflow_dispatch:
    inputs:
      keyId:
        description: 'You can override the AWS access key id, or keep it empty to use the default from the secrets'
        required: false
        default: ${{ secrets.AWS_ACCESS_KEY_ID }}
      secretAccessKey:
        description: 'You can override the AWS secret access key, or keep it empty to use the default from the secrets'
        required: false
        default: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
env:
  # server
  IMAGE: reearth/reearth:nightly
  IMAGE_AWS: reearth-test-server:latest

jobs:
#  deploy_web:
#    name: Deploy web to AWS
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: web
#    steps:
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: lts/*
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ github.events.inputs.keyId }}
#          aws-secret-access-key: ${{ github.events.inputs.secretAccessKey }}
#          aws-region: us-east-1
#      - name: Install Amplify CLI
#        run: yarn global add @aws-amplify/cli
#      - name: Download artifact
#        uses: dawidd6/action-download-artifact@v2
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          workflow: ci_web.yml
#          workflow_conclusion: success
#          branch: main
#          name: reearth-cms-web
#      - name: Extract artifact
#        run: tar -xf reearth-cms-web.tar.gz
#      - name: Initialize Amplify
#        run: amplify init --appId ${{ secrets.AWS_AMPLIFY_APP_ID }} --envName test --yes
#      - name: Build and Deploy to Amplify
#        run: amplify publish --appId ${{ secrets.AWS_AMPLIFY_APP_ID }} --envName test --yes

  deploy_server:
    name: Deploy server to AWS
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ github.events.inputs.keyId }}
          aws-secret-access-key: ${{ github.events.inputs.secretAccessKey }}
          aws-region: us-west-2

      - name: Log in to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: docker pull, push to ECR
        run: |
          docker pull $IMAGE
          docker tag $IMAGE ${{ steps.login-ecr.outputs.registry }}/$IMAGE_AWS
          docker push ${{ steps.login-ecr.outputs.registry }}/$IMAGE_AWS
