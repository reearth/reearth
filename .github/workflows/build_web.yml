name: build-web
on:
  workflow_dispatch:
  repository_dispatch:
      types: [build-web]
jobs:
  info: 
    name: Collect information
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.info.outputs.sha_short }}
      new_tag: ${{ steps.info.outputs.new_tag }}
      new_tag_short: ${{ steps.info.outputs.new_tag_short }}
      name: ${{ steps.info.outputs.name }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Fetch tags
        run: git fetch --prune --unshallow --tags
      - name: Get info
        id: info
        # The tag name should be retrieved lazily, as tagging may be delayed.
        env:
          BRANCH: ${{ github.event.workflow_run.head_branch }}
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "BRANCH=$BRANCH"
          if [[ "$BRANCH" = "release" || "$BRANCH" = "release/"* ]]; then
            TAG=$(git tag --points-at HEAD)
            if [[ ! -z "$TAG" ]]; then
              echo "::set-output name=new_tag::$TAG"
              echo "::set-output name=new_tag_short::${TAG#v}"
            else
              echo "::set-output name=name::rc"
            fi
          else
            echo "::set-output name=name::nightly"
          fi
      - name: Show info
        env:
          SHA_SHORT: ${{ steps.info.outputs.sha_short }}
          NEW_TAG: ${{ steps.info.outputs.new_tag }}
          NEW_TAG_SHORT: ${{ steps.info.outputs.new_tag_short }}
          NAME: ${{ steps.info.outputs.name }}
        run: echo "sha_short=$SHA_SHORT, new_tag=$NEW_TAG, new_tag_short=$NEW_TAG_SHORT, name=$NAME"

  build-web:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    if: needs.info.outputs.name
    needs:
      - info
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: yarn install
      - name: Build
        run: yarn build
      - name: Pack
        run: mv dist reearth-web && tar -zcvf reearth-web.tar.gz reearth-web
      - uses: actions/upload-artifact@v2
        with:
          name: reearth-web
          path: web/reearth-web.tar.gz

  release-nightly:
    name: Release nightly/rc
    runs-on: ubuntu-latest
    needs: [info, build-web]
    if: needs.info.outputs.name
    env:
      ARTIFACT: reearth-web_${{ needs.info.outputs.name }}.tar.gz
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: reearth-web
      - name: Rename artifact
        run: mv reearth-web.tar.gz $ARTIFACT
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACT }}
          artifactContentType: application/gzip
          commit: ${{ github.sha }}
          name: ${{ needs.info.outputs.name }}
          tag: ${{ needs.info.outputs.name }}
          body: ${{ github.sha }}
          prerelease: true
      - name: Invoke ci-deploy-web-nightly workflow
        uses: benc-uk/workflow-dispatch@v1
        if: needs.info.outputs.name == 'nightly'
        with:
          workflow: deploy-web-nightly
          token: ${{ secrets.GPT }}
  
  build-docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [info, release-nightly]
    if: needs.info.outputs.name || needs.info.outputs.new_tag
    env:
      IMAGE_NAME: reearth/reearth
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get options
        id: options
        env:
          TAG: ${{ needs.info.outputs.new_tag_short }}
          NAME: ${{ needs.info.outputs.name }}
          SHA: ${{ needs.info.outputs.sha_short }}
        run: |
          if [[ -n $TAG ]]; then
            PLATFORMS=linux/amd64,linux/arm64
            VERSION=$TAG
            TAGS=$IMAGE_NAME:$TAG
            if [[ ! $TAG =~ '-' ]]; then
              TAGS+=,${IMAGE_NAME}:${TAG%.*}
              TAGS+=,${IMAGE_NAME}:${TAG%%.*}
              TAGS+=,${IMAGE_NAME}:latest
            fi
          else
            PLATFORMS=linux/amd64
            VERSION=$SHA
            TAGS=$IMAGE_NAME:$NAME
          fi
          echo "::set-output name=platforms::$PLATFORMS"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=tags::$TAGS"
      - name: Fetch reearth-web release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: reearth/reearth
          version: tags/${{ needs.info.outputs.name || needs.info.outputs.tag }}
          file: reearth-web_${{ needs.info.outputs.name || needs.info.outputs.tag }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          target: server/reearth-web.tar.gz
      - name: Extract reearth/web
        run: tar -xvf reearth-web.tar.gz; mv reearth-web web; ls
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: server
          platforms: ${{ steps.options.outputs.platforms }}
          push: true
          build-args: VERSION=${{ steps.options.outputs.version }}
          tags: ${{ steps.options.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - info
    if: needs.info.outputs.new_tag
    env:
      ARTIFACT: reearth-web_${{ needs.info.outputs.new_tag }}.tar.gz
    steps:
      - name: Fetch reearth-web release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: tags/rc
          file: reearth-web_rc.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Rename artifact
        run: mv reearth-web_rc.tar.gz $ARTIFACT
      - name: Download latest changelog
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: release.yml
          name: changelog-${{ needs.info.outputs.new_tag }}
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.ARTIFACT }}
          artifactContentType: application/gzip
          commit: ${{ github.sha }}
          name: ${{ needs.info.outputs.new_tag }}
          tag: ${{ needs.info.outputs.new_tag }}
          bodyFile: CHANGELOG_latest.md
